{"version":3,"sources":["utils.js","components/ProductRow.js","App.js","index.js"],"names":["availabilityRequest","tokens","Map","manufacturer","a","has","get","cancel","token","axios","CancelToken","source","set","attempt","cancelToken","res","result","data","map","item","id","availability","isCancel","console","log","availabilityRequestCreator","productRequest","category","productRequestCreator","ProductRow","product","name","color","price","status","loading","Spinner","animation","size","App","categories","useState","setCategory","products","setProducts","setAvailability","setLoading","Set","availabilitiesLoading","setAvailabilitiesLoading","useEffect","getProducts","forEach","getAvailability","add","delete","resolveAvailability","className","cat","i","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d583ac5c.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst availabilityRequestCreator = () => {\n    let tokens = new Map();\n\n    return async (manufacturer) => {\n        // Check for previous request\n        if (tokens.has(manufacturer)) {\n            // Cancel previous request\n            tokens.get(manufacturer).cancel();\n        }\n\n        const token = axios.CancelToken.source();\n        tokens.set(manufacturer, token);\n\n        // Try 4 times\n        for (var attempt = 1; attempt < 5; attempt++) {\n            try {\n                const res = await axios.get('/api/availability/' + manufacturer, { cancelToken: token.token });\n                const result = new Map(res.data.map(item => [item.id, item.availability]));\n                return result;\n            } catch (err) {\n                if (axios.isCancel(err)) {\n                    console.log('Availability request canceled');\n                    return;\n                } else {\n                    console.log(err);\n                }\n            }\n        }\n    }\n}\n\n\nconst productRequestCreator = () => {\n    let token;\n\n    return async (category) => {\n        // Check for previous request\n        if (token) {\n            // Cancel previous request\n            token.cancel();\n        }\n\n        token = axios.CancelToken.source();\n\n        try {\n            const res = await axios.get('/api/products/' + category, { cancelToken: token.token });\n            const result = res.data;\n            return result;\n        } catch (err) {\n            if (axios.isCancel(err)) {\n                console.log('Availability request canceled');\n            } else {\n                console.log(err);\n            }\n        }\n    }\n}\n\nexport const availabilityRequest = availabilityRequestCreator();\nexport const productRequest = productRequestCreator();","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\nfunction ProductRow({ product, availability }) {\n\n    return(\n        <tr>\n            <td>{product.id}</td>\n            <td>{product.name}</td>\n            <td>{product.manufacturer}</td>\n            <td>{product.color}</td>\n            <td>{product.price}</td>\n            <td>\n                {availability.status}\n                {availability.loading ? <Spinner animation=\"border\" size=\"sm\"/> : <></>}\n            </td>\n        </tr>\n    );\n}\n\nexport default ProductRow;","import React, { useState, useEffect } from 'react';\nimport { productRequest, availabilityRequest } from './utils';\nimport ProductRow from './components/ProductRow';\nimport Spinner from 'react-bootstrap/Spinner';\nimport './App.css';\n\nfunction App() {\n\n  const categories = ['beanies', 'facemasks', 'gloves'];\n\n  const [category, setCategory] = useState(categories[0]);\n  const [products, setProducts] = useState([]);\n  const [availability, setAvailability] = useState(new Map());\n  const [loading, setLoading] = useState(false);\n  const [availabilitiesLoading, setAvailabilitiesLoading] = useState(new Set([]));\n\n  useEffect(() => {   \n    getProducts(category);    \n  }, [category]);\n\n  useEffect(() => {\n    // Find all unique manufacturers\n    const manufacturers = [...new Set(products.map(item => item.manufacturer))]\n\n    manufacturers.forEach((manufacturer) => {\n      getAvailability(manufacturer);\n    })\n  }, [products]);\n\n  const getProducts = async (category) => {\n    setLoading(true);\n    const res = await productRequest(category);\n    if (res) {\n      setProducts(res)\n    }\n    setLoading(false);\n  }\n\n  const getAvailability = async (manufacturer) => {\n    setAvailabilitiesLoading(a => new Set(a.add(manufacturer)));\n    \n    const res = await availabilityRequest(manufacturer);\n    if (res) {\n      setAvailability(a => new Map(a.set(manufacturer, res))); \n    }\n\n    setAvailabilitiesLoading(a => {\n    a.delete(manufacturer);\n      return new Set(a);\n    });\n  }\n\n  const resolveAvailability = (manufacturer, id) => {\n    let result = [];\n\n    if (availability.has(manufacturer) && availability.get(manufacturer).has(id)) {\n      result.status = availability.get(manufacturer).get(id);\n    } else {\n      result.status = '  ?  ';\n    }\n    if (availabilitiesLoading.has(manufacturer)) {\n      result.loading = true;\n    } else {\n      result.loading = false;\n    }\n    return result;\n  }\n\n  return (\n    <div className=\"App\">\n      {categories.map((cat, i) =>         \n        <button onClick={() => setCategory(cat)} key={i}>\n          {cat}\n        </button>\n      )}\n      <h2>{category}</h2>\n      <div>\n        {\n          loading ?\n            <>\n              <Spinner animation=\"border\"/>\n            </> \n          :\n          <table className=\"ProductTable\">\n            <tbody>\n              <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>Manufacturer</th>\n                <th>Color</th>\n                <th>Price</th>\n                <th>Availability</th>\n              </tr>\n              {\n                products.map((product, i) =>\n                  <ProductRow \n                    key={i} \n                    product={product} \n                    availability={resolveAvailability(product.manufacturer, product.id)} \n                  />             \n              )}\n            </tbody>\n          </table>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}